<?php
/**
 * ShipmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0-RM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMailV4\ShipmentsApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RoyalMailV4\ShipmentsApi\ApiException;
use RoyalMailV4\ShipmentsApi\Configuration;
use RoyalMailV4\ShipmentsApi\HeaderSelector;
use RoyalMailV4\ShipmentsApi\ObjectSerializer;

/**
 * ShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4ShipmentsDeferPut
     *
     * Defer Shipments
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\DeferShipmentRequest[] $body Defer shipment requests (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4ShipmentsDeferPut($body = null)
    {
        $this->v4ShipmentsDeferPutWithHttpInfo($body);
    }

    /**
     * Operation v4ShipmentsDeferPutWithHttpInfo
     *
     * Defer Shipments
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\DeferShipmentRequest[] $body Defer shipment requests (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsDeferPutWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->v4ShipmentsDeferPutRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsDeferPutAsync
     *
     * Defer Shipments
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\DeferShipmentRequest[] $body Defer shipment requests (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsDeferPutAsync($body = null)
    {
        return $this->v4ShipmentsDeferPutAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsDeferPutAsyncWithHttpInfo
     *
     * Defer Shipments
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\DeferShipmentRequest[] $body Defer shipment requests (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsDeferPutAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->v4ShipmentsDeferPutRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsDeferPut'
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\DeferShipmentRequest[] $body Defer shipment requests (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsDeferPutRequest($body = null)
    {

        $resourcePath = '/v4/shipments/defer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsPreallocateTrackingNumberRmPost
     *
     * Pre Allocate Tracking Number
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberRequest $body The request. (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberResponse
     */
    public function v4ShipmentsPreallocateTrackingNumberRmPost($body = null)
    {
        list($response) = $this->v4ShipmentsPreallocateTrackingNumberRmPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation v4ShipmentsPreallocateTrackingNumberRmPostWithHttpInfo
     *
     * Pre Allocate Tracking Number
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberRequest $body The request. (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsPreallocateTrackingNumberRmPostWithHttpInfo($body = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberResponse';
        $request = $this->v4ShipmentsPreallocateTrackingNumberRmPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsPreallocateTrackingNumberRmPostAsync
     *
     * Pre Allocate Tracking Number
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberRequest $body The request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPreallocateTrackingNumberRmPostAsync($body = null)
    {
        return $this->v4ShipmentsPreallocateTrackingNumberRmPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsPreallocateTrackingNumberRmPostAsyncWithHttpInfo
     *
     * Pre Allocate Tracking Number
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberRequest $body The request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPreallocateTrackingNumberRmPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberResponse';
        $request = $this->v4ShipmentsPreallocateTrackingNumberRmPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsPreallocateTrackingNumberRmPost'
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\PreAllocateTrackingNumberRequest $body The request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsPreallocateTrackingNumberRmPostRequest($body = null)
    {

        $resourcePath = '/v4/shipments/preallocateTrackingNumber/rm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsPrintDocumentCarrierCodeShipmentIdPost
     *
     * Print Document
     *
     * @param  string $carrierCode Carrier Code (required)
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\PrintDocumentRequest $body Print Document Request (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMailV4\ShipmentsApi\Model\PrintDocumentResponse
     */
    public function v4ShipmentsPrintDocumentCarrierCodeShipmentIdPost($carrierCode, $shipmentId, $body = null)
    {
        list($response) = $this->v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostWithHttpInfo($carrierCode, $shipmentId, $body);
        return $response;
    }

    /**
     * Operation v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostWithHttpInfo
     *
     * Print Document
     *
     * @param  string $carrierCode Carrier Code (required)
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\PrintDocumentRequest $body Print Document Request (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMailV4\ShipmentsApi\Model\PrintDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostWithHttpInfo($carrierCode, $shipmentId, $body = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\PrintDocumentResponse';
        $request = $this->v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostRequest($carrierCode, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostAsync
     *
     * Print Document
     *
     * @param  string $carrierCode Carrier Code (required)
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\PrintDocumentRequest $body Print Document Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostAsync($carrierCode, $shipmentId, $body = null)
    {
        return $this->v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostAsyncWithHttpInfo($carrierCode, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostAsyncWithHttpInfo
     *
     * Print Document
     *
     * @param  string $carrierCode Carrier Code (required)
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\PrintDocumentRequest $body Print Document Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostAsyncWithHttpInfo($carrierCode, $shipmentId, $body = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\PrintDocumentResponse';
        $request = $this->v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostRequest($carrierCode, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsPrintDocumentCarrierCodeShipmentIdPost'
     *
     * @param  string $carrierCode Carrier Code (required)
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\PrintDocumentRequest $body Print Document Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsPrintDocumentCarrierCodeShipmentIdPostRequest($carrierCode, $shipmentId, $body = null)
    {
        // verify the required parameter 'carrierCode' is set
        if ($carrierCode === null || (is_array($carrierCode) && count($carrierCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrierCode when calling v4ShipmentsPrintDocumentCarrierCodeShipmentIdPost'
            );
        }
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling v4ShipmentsPrintDocumentCarrierCodeShipmentIdPost'
            );
        }

        $resourcePath = '/v4/shipments/printDocument/{carrierCode}/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrierCode !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrierCode),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsPrintLabelRmShipmentIdGet
     *
     * Print Label
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormat $labelFormat Label Format &lt;br /&gt;             &lt;br /&gt;**PDF** Base 64 encoded PDF &lt;br /&gt;**PNG** Base 64 encoded PNG &lt;br /&gt;**DATASTREAM** - Label components broken down into a data-stream, for you to draw your own label &lt;br /&gt;**ZPL203DPI** Base 64 encoded text for Zebra printer at 203 DPI &lt;br /&gt;**ZPL300DPI** Base 64 encoded text for Zebra printer at 300 DPI &lt;br /&gt;             &lt;br /&gt;*DATASTREAM is only available if it has been activated on your account.* &lt;br /&gt;             &lt;br /&gt;Defaults To PDF (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse
     */
    public function v4ShipmentsPrintLabelRmShipmentIdGet($shipmentId, $labelFormat = null)
    {
        list($response) = $this->v4ShipmentsPrintLabelRmShipmentIdGetWithHttpInfo($shipmentId, $labelFormat);
        return $response;
    }

    /**
     * Operation v4ShipmentsPrintLabelRmShipmentIdGetWithHttpInfo
     *
     * Print Label
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormat $labelFormat Label Format &lt;br /&gt;             &lt;br /&gt;**PDF** Base 64 encoded PDF &lt;br /&gt;**PNG** Base 64 encoded PNG &lt;br /&gt;**DATASTREAM** - Label components broken down into a data-stream, for you to draw your own label &lt;br /&gt;**ZPL203DPI** Base 64 encoded text for Zebra printer at 203 DPI &lt;br /&gt;**ZPL300DPI** Base 64 encoded text for Zebra printer at 300 DPI &lt;br /&gt;             &lt;br /&gt;*DATASTREAM is only available if it has been activated on your account.* &lt;br /&gt;             &lt;br /&gt;Defaults To PDF (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsPrintLabelRmShipmentIdGetWithHttpInfo($shipmentId, $labelFormat = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse';
        $request = $this->v4ShipmentsPrintLabelRmShipmentIdGetRequest($shipmentId, $labelFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsPrintLabelRmShipmentIdGetAsync
     *
     * Print Label
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormat $labelFormat Label Format &lt;br /&gt;             &lt;br /&gt;**PDF** Base 64 encoded PDF &lt;br /&gt;**PNG** Base 64 encoded PNG &lt;br /&gt;**DATASTREAM** - Label components broken down into a data-stream, for you to draw your own label &lt;br /&gt;**ZPL203DPI** Base 64 encoded text for Zebra printer at 203 DPI &lt;br /&gt;**ZPL300DPI** Base 64 encoded text for Zebra printer at 300 DPI &lt;br /&gt;             &lt;br /&gt;*DATASTREAM is only available if it has been activated on your account.* &lt;br /&gt;             &lt;br /&gt;Defaults To PDF (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPrintLabelRmShipmentIdGetAsync($shipmentId, $labelFormat = null)
    {
        return $this->v4ShipmentsPrintLabelRmShipmentIdGetAsyncWithHttpInfo($shipmentId, $labelFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsPrintLabelRmShipmentIdGetAsyncWithHttpInfo
     *
     * Print Label
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormat $labelFormat Label Format &lt;br /&gt;             &lt;br /&gt;**PDF** Base 64 encoded PDF &lt;br /&gt;**PNG** Base 64 encoded PNG &lt;br /&gt;**DATASTREAM** - Label components broken down into a data-stream, for you to draw your own label &lt;br /&gt;**ZPL203DPI** Base 64 encoded text for Zebra printer at 203 DPI &lt;br /&gt;**ZPL300DPI** Base 64 encoded text for Zebra printer at 300 DPI &lt;br /&gt;             &lt;br /&gt;*DATASTREAM is only available if it has been activated on your account.* &lt;br /&gt;             &lt;br /&gt;Defaults To PDF (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPrintLabelRmShipmentIdGetAsyncWithHttpInfo($shipmentId, $labelFormat = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPrintLabelResponse';
        $request = $this->v4ShipmentsPrintLabelRmShipmentIdGetRequest($shipmentId, $labelFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsPrintLabelRmShipmentIdGet'
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormat $labelFormat Label Format &lt;br /&gt;             &lt;br /&gt;**PDF** Base 64 encoded PDF &lt;br /&gt;**PNG** Base 64 encoded PNG &lt;br /&gt;**DATASTREAM** - Label components broken down into a data-stream, for you to draw your own label &lt;br /&gt;**ZPL203DPI** Base 64 encoded text for Zebra printer at 203 DPI &lt;br /&gt;**ZPL300DPI** Base 64 encoded text for Zebra printer at 300 DPI &lt;br /&gt;             &lt;br /&gt;*DATASTREAM is only available if it has been activated on your account.* &lt;br /&gt;             &lt;br /&gt;Defaults To PDF (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsPrintLabelRmShipmentIdGetRequest($shipmentId, $labelFormat = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling v4ShipmentsPrintLabelRmShipmentIdGet'
            );
        }

        $resourcePath = '/v4/shipments/printLabel/rm/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($labelFormat !== null) {
            $queryParams['labelFormat'] = ObjectSerializer::toQueryValue($labelFormat, null);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGet
     *
     * Print My Label QR Code
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMailV4\ShipmentsApi\Model\QRCodeResponse
     */
    public function v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGet($shipmentId)
    {
        list($response) = $this->v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetWithHttpInfo($shipmentId);
        return $response;
    }

    /**
     * Operation v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetWithHttpInfo
     *
     * Print My Label QR Code
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMailV4\ShipmentsApi\Model\QRCodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetWithHttpInfo($shipmentId)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\QRCodeResponse';
        $request = $this->v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetRequest($shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\QRCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetAsync
     *
     * Print My Label QR Code
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetAsync($shipmentId)
    {
        return $this->v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetAsyncWithHttpInfo($shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetAsyncWithHttpInfo
     *
     * Print My Label QR Code
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetAsyncWithHttpInfo($shipmentId)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\QRCodeResponse';
        $request = $this->v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetRequest($shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGet'
     *
     * @param  string $shipmentId Shipment Id &lt;br /&gt;The Shipment Id may be an id or a tracking/barcode number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGetRequest($shipmentId)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling v4ShipmentsPrintMyLabelQRCodeRmShipmentIdGet'
            );
        }

        $resourcePath = '/v4/shipments/printMyLabelQRCode/rm/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsRmPost
     *
     * Create Shipment
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest $body Shipment Details (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPackageResponseCreateShipmentResponse
     */
    public function v4ShipmentsRmPost($body = null)
    {
        list($response) = $this->v4ShipmentsRmPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation v4ShipmentsRmPostWithHttpInfo
     *
     * Create Shipment
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest $body Shipment Details (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPackageResponseCreateShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsRmPostWithHttpInfo($body = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPackageResponseCreateShipmentResponse';
        $request = $this->v4ShipmentsRmPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPackageResponseCreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsRmPostAsync
     *
     * Create Shipment
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest $body Shipment Details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsRmPostAsync($body = null)
    {
        return $this->v4ShipmentsRmPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsRmPostAsyncWithHttpInfo
     *
     * Create Shipment
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest $body Shipment Details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsRmPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\RoyalMailLabelFormatRoyalMailShipmentResponseCarrierSpecificsPackageResponseCreateShipmentResponse';
        $request = $this->v4ShipmentsRmPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsRmPost'
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\RoyalMailShipmentRequestCarrierSpecificsRoyalMailPackageRoyalMailLabelFormatCreateShipmentRequest $body Shipment Details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsRmPostRequest($body = null)
    {

        $resourcePath = '/v4/shipments/rm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsShippingLocationIdGet
     *
     * Get Shipments
     *
     * @param  string $shippingLocationId Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location. (required)
     * @param  string $shippingAccountId Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping account. (optional)
     * @param  string $carrierCode Carrier Code &lt;br /&gt;If shippingAccountId and carrier are both provided, then the value sent in the carrier field will be ignored and the carrier associated with the shipping account will be used. (optional)
     * @param  \RoyalMailV4\ShipmentsApi\Model\GetShipmentsStatusType $status Status &lt;br /&gt;Filter by shipment status. (optional)
     * @param  string $destinationCountryCode Country Code &lt;br /&gt;ISO Alpha-2 Country Code per ISO 3166 Standard. (optional)
     * @param  \DateTime $dateFrom Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $dateTo Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $pageSize The maximum number of records per page. (optional, default to 100)
     * @param  int $pageNumber The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMailV4\ShipmentsApi\Model\ShipmentsPagedResponse
     */
    public function v4ShipmentsShippingLocationIdGet($shippingLocationId, $shippingAccountId = null, $carrierCode = null, $status = null, $destinationCountryCode = null, $dateFrom = null, $dateTo = null, $pageSize = '100', $pageNumber = '1')
    {
        list($response) = $this->v4ShipmentsShippingLocationIdGetWithHttpInfo($shippingLocationId, $shippingAccountId, $carrierCode, $status, $destinationCountryCode, $dateFrom, $dateTo, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation v4ShipmentsShippingLocationIdGetWithHttpInfo
     *
     * Get Shipments
     *
     * @param  string $shippingLocationId Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location. (required)
     * @param  string $shippingAccountId Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping account. (optional)
     * @param  string $carrierCode Carrier Code &lt;br /&gt;If shippingAccountId and carrier are both provided, then the value sent in the carrier field will be ignored and the carrier associated with the shipping account will be used. (optional)
     * @param  \RoyalMailV4\ShipmentsApi\Model\GetShipmentsStatusType $status Status &lt;br /&gt;Filter by shipment status. (optional)
     * @param  string $destinationCountryCode Country Code &lt;br /&gt;ISO Alpha-2 Country Code per ISO 3166 Standard. (optional)
     * @param  \DateTime $dateFrom Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $dateTo Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $pageSize The maximum number of records per page. (optional, default to 100)
     * @param  int $pageNumber The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMailV4\ShipmentsApi\Model\ShipmentsPagedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsShippingLocationIdGetWithHttpInfo($shippingLocationId, $shippingAccountId = null, $carrierCode = null, $status = null, $destinationCountryCode = null, $dateFrom = null, $dateTo = null, $pageSize = '100', $pageNumber = '1')
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\ShipmentsPagedResponse';
        $request = $this->v4ShipmentsShippingLocationIdGetRequest($shippingLocationId, $shippingAccountId, $carrierCode, $status, $destinationCountryCode, $dateFrom, $dateTo, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ShipmentsPagedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsShippingLocationIdGetAsync
     *
     * Get Shipments
     *
     * @param  string $shippingLocationId Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location. (required)
     * @param  string $shippingAccountId Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping account. (optional)
     * @param  string $carrierCode Carrier Code &lt;br /&gt;If shippingAccountId and carrier are both provided, then the value sent in the carrier field will be ignored and the carrier associated with the shipping account will be used. (optional)
     * @param  \RoyalMailV4\ShipmentsApi\Model\GetShipmentsStatusType $status Status &lt;br /&gt;Filter by shipment status. (optional)
     * @param  string $destinationCountryCode Country Code &lt;br /&gt;ISO Alpha-2 Country Code per ISO 3166 Standard. (optional)
     * @param  \DateTime $dateFrom Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $dateTo Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $pageSize The maximum number of records per page. (optional, default to 100)
     * @param  int $pageNumber The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsShippingLocationIdGetAsync($shippingLocationId, $shippingAccountId = null, $carrierCode = null, $status = null, $destinationCountryCode = null, $dateFrom = null, $dateTo = null, $pageSize = '100', $pageNumber = '1')
    {
        return $this->v4ShipmentsShippingLocationIdGetAsyncWithHttpInfo($shippingLocationId, $shippingAccountId, $carrierCode, $status, $destinationCountryCode, $dateFrom, $dateTo, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsShippingLocationIdGetAsyncWithHttpInfo
     *
     * Get Shipments
     *
     * @param  string $shippingLocationId Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location. (required)
     * @param  string $shippingAccountId Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping account. (optional)
     * @param  string $carrierCode Carrier Code &lt;br /&gt;If shippingAccountId and carrier are both provided, then the value sent in the carrier field will be ignored and the carrier associated with the shipping account will be used. (optional)
     * @param  \RoyalMailV4\ShipmentsApi\Model\GetShipmentsStatusType $status Status &lt;br /&gt;Filter by shipment status. (optional)
     * @param  string $destinationCountryCode Country Code &lt;br /&gt;ISO Alpha-2 Country Code per ISO 3166 Standard. (optional)
     * @param  \DateTime $dateFrom Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $dateTo Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $pageSize The maximum number of records per page. (optional, default to 100)
     * @param  int $pageNumber The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsShippingLocationIdGetAsyncWithHttpInfo($shippingLocationId, $shippingAccountId = null, $carrierCode = null, $status = null, $destinationCountryCode = null, $dateFrom = null, $dateTo = null, $pageSize = '100', $pageNumber = '1')
    {
        $returnType = '\RoyalMailV4\ShipmentsApi\Model\ShipmentsPagedResponse';
        $request = $this->v4ShipmentsShippingLocationIdGetRequest($shippingLocationId, $shippingAccountId, $carrierCode, $status, $destinationCountryCode, $dateFrom, $dateTo, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsShippingLocationIdGet'
     *
     * @param  string $shippingLocationId Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location. (required)
     * @param  string $shippingAccountId Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping account. (optional)
     * @param  string $carrierCode Carrier Code &lt;br /&gt;If shippingAccountId and carrier are both provided, then the value sent in the carrier field will be ignored and the carrier associated with the shipping account will be used. (optional)
     * @param  \RoyalMailV4\ShipmentsApi\Model\GetShipmentsStatusType $status Status &lt;br /&gt;Filter by shipment status. (optional)
     * @param  string $destinationCountryCode Country Code &lt;br /&gt;ISO Alpha-2 Country Code per ISO 3166 Standard. (optional)
     * @param  \DateTime $dateFrom Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $dateTo Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $pageSize The maximum number of records per page. (optional, default to 100)
     * @param  int $pageNumber The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsShippingLocationIdGetRequest($shippingLocationId, $shippingAccountId = null, $carrierCode = null, $status = null, $destinationCountryCode = null, $dateFrom = null, $dateTo = null, $pageSize = '100', $pageNumber = '1')
    {
        // verify the required parameter 'shippingLocationId' is set
        if ($shippingLocationId === null || (is_array($shippingLocationId) && count($shippingLocationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shippingLocationId when calling v4ShipmentsShippingLocationIdGet'
            );
        }

        $resourcePath = '/v4/shipments/{shippingLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shippingAccountId !== null) {
            $queryParams['shippingAccountId'] = ObjectSerializer::toQueryValue($shippingAccountId, null);
        }
        // query params
        if ($carrierCode !== null) {
            $queryParams['carrierCode'] = ObjectSerializer::toQueryValue($carrierCode, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($destinationCountryCode !== null) {
            $queryParams['destinationCountryCode'] = ObjectSerializer::toQueryValue($destinationCountryCode, null);
        }
        // query params
        if ($dateFrom !== null) {
            $queryParams['dateFrom'] = ObjectSerializer::toQueryValue($dateFrom, 'date');
        }
        // query params
        if ($dateTo !== null) {
            $queryParams['dateTo'] = ObjectSerializer::toQueryValue($dateTo, 'date');
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize, 'int32');
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber, 'int32');
        }

        // path params
        if ($shippingLocationId !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingLocationId' . '}',
                ObjectSerializer::toPathValue($shippingLocationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ShipmentsStatusPut
     *
     * Update Status
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\UpdateStatusRequest $body Update Status Request (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4ShipmentsStatusPut($body = null)
    {
        $this->v4ShipmentsStatusPutWithHttpInfo($body);
    }

    /**
     * Operation v4ShipmentsStatusPutWithHttpInfo
     *
     * Update Status
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\UpdateStatusRequest $body Update Status Request (optional)
     *
     * @throws \RoyalMailV4\ShipmentsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ShipmentsStatusPutWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->v4ShipmentsStatusPutRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMailV4\ShipmentsApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ShipmentsStatusPutAsync
     *
     * Update Status
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\UpdateStatusRequest $body Update Status Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsStatusPutAsync($body = null)
    {
        return $this->v4ShipmentsStatusPutAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ShipmentsStatusPutAsyncWithHttpInfo
     *
     * Update Status
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\UpdateStatusRequest $body Update Status Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ShipmentsStatusPutAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->v4ShipmentsStatusPutRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ShipmentsStatusPut'
     *
     * @param  \RoyalMailV4\ShipmentsApi\Model\UpdateStatusRequest $body Update Status Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ShipmentsStatusPutRequest($body = null)
    {

        $resourcePath = '/v4/shipments/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
