<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0-RM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMailV4\ShipmentsApi\Model;

use \ArrayAccess;
use \RoyalMailV4\ShipmentsApi\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description Used to provide details of the items sent in the shipment package(s).  &lt;br /&gt;Item information is optional for domestic and non-dutiable shipments, but required for dutiable shipments.  &lt;br /&gt;If item information is provided, this element must be repeated for each unique item in the shipment.
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'skuCode' => 'string',
        'packageOccurrence' => 'int',
        'quantity' => 'int',
        'description' => 'string',
        'value' => 'double',
        'weight' => 'double',
        'hSCode' => 'string',
        'countryOfOrigin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'skuCode' => null,
        'packageOccurrence' => 'int32',
        'quantity' => 'int32',
        'description' => null,
        'value' => 'double',
        'weight' => 'double',
        'hSCode' => null,
        'countryOfOrigin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skuCode' => 'SkuCode',
        'packageOccurrence' => 'PackageOccurrence',
        'quantity' => 'Quantity',
        'description' => 'Description',
        'value' => 'Value',
        'weight' => 'Weight',
        'hSCode' => 'HSCode',
        'countryOfOrigin' => 'CountryOfOrigin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skuCode' => 'setSkuCode',
        'packageOccurrence' => 'setPackageOccurrence',
        'quantity' => 'setQuantity',
        'description' => 'setDescription',
        'value' => 'setValue',
        'weight' => 'setWeight',
        'hSCode' => 'setHSCode',
        'countryOfOrigin' => 'setCountryOfOrigin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skuCode' => 'getSkuCode',
        'packageOccurrence' => 'getPackageOccurrence',
        'quantity' => 'getQuantity',
        'description' => 'getDescription',
        'value' => 'getValue',
        'weight' => 'getWeight',
        'hSCode' => 'getHSCode',
        'countryOfOrigin' => 'getCountryOfOrigin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['skuCode'] = isset($data['skuCode']) ? $data['skuCode'] : null;
        $this->container['packageOccurrence'] = isset($data['packageOccurrence']) ? $data['packageOccurrence'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['hSCode'] = isset($data['hSCode']) ? $data['hSCode'] : null;
        $this->container['countryOfOrigin'] = isset($data['countryOfOrigin']) ? $data['countryOfOrigin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skuCode
     *
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['skuCode'];
    }

    /**
     * Sets skuCode
     *
     * @param string $skuCode Stock Keeping Unit number of the item.
     *
     * @return $this
     */
    public function setSkuCode($skuCode)
    {
        $this->container['skuCode'] = $skuCode;

        return $this;
    }

    /**
     * Gets packageOccurrence
     *
     * @return int
     */
    public function getPackageOccurrence()
    {
        return $this->container['packageOccurrence'];
    }

    /**
     * Sets packageOccurrence
     *
     * @param int $packageOccurrence Used to assign this item to a specific package. <br />The Package Occurrence provided here must exist on one of the packages in the Package element.        <br />Note: For dutiable multi-package shipments that are not using a consignment service, items must be assigned to a package so that accurate customs information is given. <br />Therefore, if the shipment contains more than one package, and it isn't using a consignment service, then Package Occurrence is required.
     *
     * @return $this
     */
    public function setPackageOccurrence($packageOccurrence)
    {
        $this->container['packageOccurrence'] = $packageOccurrence;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of these items in the package.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the item. This must describe the specific item being shipped rather than the general nature of the goods e.g. 'skirt' instead of 'ladies clothing'.  <br /> <br />Required for dutiable shipments, unless the SKU Code of a stored product is provided. When the SKU Code of a stored product is provided, and this field is not provided, it will be populated from the stored product. If the SKU code of a stored product is provided, and this field is provided in the Create Shipment request, then the data provided in this field will be used instead of the data from the stored product.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double $value The value of a single instance of the item, in the currency provided for the shipment in the CurrencyCode field. <br /> <br />Required for dutiable shipments, unless the SKU Code of a stored product is provided. When the SKU Code of a stored product is provided, and this field is not provided, it will be populated from the stored product. If the SKU code of a stored product is provided, and this field is provided in the Create Shipment request, then the data provided in this field will be used instead of the data from the stored product.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight The weight of a single instance of the item, in the unit of measure provided in the WeightUnitOfMeasure element (defaults to KG). <br />For non-dutiable shipments, a weight of 0 is accepted. For dutiable shipments, an item weight of 1 gram or greater must be provided.  <br />The maximum weight accepted is 1000 KG. <br /> <br />Required for dutiable shipments, unless the SKU Code of a stored product is provided. When the SKU Code of a stored product is provided, and this field is not provided, it will be populated from the stored product. If the SKU code of a stored product is provided, and this field is provided in the Create Shipment request, then the data provided in this field will be used instead of the data from the stored product.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets hSCode
     *
     * @return string
     */
    public function getHSCode()
    {
        return $this->container['hSCode'];
    }

    /**
     * Sets hSCode
     *
     * @param string $hSCode The Harmonized Commodity Description and Coding System Code. <br />Used by Customs to calculate potential duties and taxes. <br />May be required for dutiable shipments, depending on the carrier and destination country. <br />The number of characters required for the HS Code may vary depending on the service and destination country. <br />Dots and spaces in the HS Code are accepted. <br />For more information on HS Codes and to find the correct HS Codes for your items, see https://www.gov.uk/trade-tariff
     *
     * @return $this
     */
    public function setHSCode($hSCode)
    {
        $this->container['hSCode'] = $hSCode;

        return $this;
    }

    /**
     * Gets countryOfOrigin
     *
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['countryOfOrigin'];
    }

    /**
     * Sets countryOfOrigin
     *
     * @param string $countryOfOrigin Country the item was produced/manufactured in.  <br />2 Digit ISO Country Code, per ISO 3166 Standard. <br />May be required on dutiable shipments, depending on the carrier and destination country.
     *
     * @return $this
     */
    public function setCountryOfOrigin($countryOfOrigin)
    {
        $this->container['countryOfOrigin'] = $countryOfOrigin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
