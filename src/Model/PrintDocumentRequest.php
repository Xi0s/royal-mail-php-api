<?php
/**
 * PrintDocumentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0-RM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMailV4\ShipmentsApi\Model;

use \ArrayAccess;
use \RoyalMailV4\ShipmentsApi\ObjectSerializer;

/**
 * PrintDocumentRequest Class Doc Comment
 *
 * @category Class
 * @description Print Document Request
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrintDocumentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrintDocumentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'documentType' => '\RoyalMailV4\ShipmentsApi\Model\DocumentType',
        'numberOfCopies' => 'int',
        'eoriNumber' => 'string',
        'vatNumber' => 'string',
        'reasonForExport' => 'string',
        'name' => 'string',
        'position' => 'string',
        'signatureImage' => 'string',
        'companyStampImage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'documentType' => null,
        'numberOfCopies' => 'int32',
        'eoriNumber' => null,
        'vatNumber' => null,
        'reasonForExport' => null,
        'name' => null,
        'position' => null,
        'signatureImage' => null,
        'companyStampImage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'documentType' => 'DocumentType',
        'numberOfCopies' => 'NumberOfCopies',
        'eoriNumber' => 'EoriNumber',
        'vatNumber' => 'VatNumber',
        'reasonForExport' => 'ReasonForExport',
        'name' => 'Name',
        'position' => 'Position',
        'signatureImage' => 'SignatureImage',
        'companyStampImage' => 'CompanyStampImage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'documentType' => 'setDocumentType',
        'numberOfCopies' => 'setNumberOfCopies',
        'eoriNumber' => 'setEoriNumber',
        'vatNumber' => 'setVatNumber',
        'reasonForExport' => 'setReasonForExport',
        'name' => 'setName',
        'position' => 'setPosition',
        'signatureImage' => 'setSignatureImage',
        'companyStampImage' => 'setCompanyStampImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'documentType' => 'getDocumentType',
        'numberOfCopies' => 'getNumberOfCopies',
        'eoriNumber' => 'getEoriNumber',
        'vatNumber' => 'getVatNumber',
        'reasonForExport' => 'getReasonForExport',
        'name' => 'getName',
        'position' => 'getPosition',
        'signatureImage' => 'getSignatureImage',
        'companyStampImage' => 'getCompanyStampImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['documentType'] = isset($data['documentType']) ? $data['documentType'] : null;
        $this->container['numberOfCopies'] = isset($data['numberOfCopies']) ? $data['numberOfCopies'] : 1;
        $this->container['eoriNumber'] = isset($data['eoriNumber']) ? $data['eoriNumber'] : null;
        $this->container['vatNumber'] = isset($data['vatNumber']) ? $data['vatNumber'] : null;
        $this->container['reasonForExport'] = isset($data['reasonForExport']) ? $data['reasonForExport'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['signatureImage'] = isset($data['signatureImage']) ? $data['signatureImage'] : null;
        $this->container['companyStampImage'] = isset($data['companyStampImage']) ? $data['companyStampImage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets documentType
     *
     * @return \RoyalMailV4\ShipmentsApi\Model\DocumentType
     */
    public function getDocumentType()
    {
        return $this->container['documentType'];
    }

    /**
     * Sets documentType
     *
     * @param \RoyalMailV4\ShipmentsApi\Model\DocumentType $documentType documentType
     *
     * @return $this
     */
    public function setDocumentType($documentType)
    {
        $this->container['documentType'] = $documentType;

        return $this;
    }

    /**
     * Gets numberOfCopies
     *
     * @return int
     */
    public function getNumberOfCopies()
    {
        return $this->container['numberOfCopies'];
    }

    /**
     * Sets numberOfCopies
     *
     * @param int $numberOfCopies Number of Copies
     *
     * @return $this
     */
    public function setNumberOfCopies($numberOfCopies)
    {
        $this->container['numberOfCopies'] = $numberOfCopies;

        return $this;
    }

    /**
     * Gets eoriNumber
     *
     * @return string
     */
    public function getEoriNumber()
    {
        return $this->container['eoriNumber'];
    }

    /**
     * Sets eoriNumber
     *
     * @param string $eoriNumber EORI Number <br />Shipper/Receiver's EORI number starts with the ISO Alpha-2 Country Code followed by a maximum 15 alphanumeric characters. For Northern Ireland starts with XI <br />Overrides the shipper's EORI number on the shipment if provided. <br />If both an EORI and VAT number exist, then only the EORI Number is printed on the CN23.
     *
     * @return $this
     */
    public function setEoriNumber($eoriNumber)
    {
        $this->container['eoriNumber'] = $eoriNumber;

        return $this;
    }

    /**
     * Gets vatNumber
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vatNumber'];
    }

    /**
     * Sets vatNumber
     *
     * @param string $vatNumber VAT Number <br />Overrides the shipper's VAT number on the shipment if provided.
     *
     * @return $this
     */
    public function setVatNumber($vatNumber)
    {
        $this->container['vatNumber'] = $vatNumber;

        return $this;
    }

    /**
     * Gets reasonForExport
     *
     * @return string
     */
    public function getReasonForExport()
    {
        return $this->container['reasonForExport'];
    }

    /**
     * Sets reasonForExport
     *
     * @param string $reasonForExport Reason for Export <br />Overrides the shipment's Reason for Export if provided. <br />If the carrier is UPU affiliated, then the allowed Reason for Exports are: <br />**Gift** <br />**Commercial Sample** <br />**Documents** <br />**Sale of Goods** <br />**Return of Goods** <br />**Mixed Content** <br />**Other**
     *
     * @return $this
     */
    public function setReasonForExport($reasonForExport)
    {
        $this->container['reasonForExport'] = $reasonForExport;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Shipper's Name <br />Override the shipment's shipper's company/contact name if provided.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position Position <br />The shipper's job title in the sender's company. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets signatureImage
     *
     * @return string
     */
    public function getSignatureImage()
    {
        return $this->container['signatureImage'];
    }

    /**
     * Sets signatureImage
     *
     * @param string $signatureImage Signature Image <br />Base 64 encoded PNG or JPEG. Maximum image size supported is 240 x 34 pixels. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*
     *
     * @return $this
     */
    public function setSignatureImage($signatureImage)
    {
        $this->container['signatureImage'] = $signatureImage;

        return $this;
    }

    /**
     * Gets companyStampImage
     *
     * @return string
     */
    public function getCompanyStampImage()
    {
        return $this->container['companyStampImage'];
    }

    /**
     * Sets companyStampImage
     *
     * @param string $companyStampImage Company Stamp Image <br />Base 64 encoded PNG or JPEG. Maximum image size supported is 600 x 66 pixels. <br />*Note: The field can only be used with the proforma and commercial invoice. It will be ignored for CN23s.*
     *
     * @return $this
     */
    public function setCompanyStampImage($companyStampImage)
    {
        $this->container['companyStampImage'] = $companyStampImage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
