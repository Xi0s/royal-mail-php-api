<?php
/**
 * ShipmentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0-RM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMailV4\ShipmentsApi\Model;

use \ArrayAccess;
use \RoyalMailV4\ShipmentsApi\ObjectSerializer;

/**
 * ShipmentResponse Class Doc Comment
 *
 * @category Class
 * @description Shipment Response
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shippingAccountId' => 'string',
        'shipmentId' => 'string',
        'trackingNumber' => 'string',
        'barcodeNumber' => 'string',
        'reference1' => 'string',
        'shipmentDate' => '\DateTime',
        'status' => 'string',
        'manifestNumber' => 'string',
        'containerId' => 'string',
        'carrier' => 'string',
        'destinationCountryCode' => 'string',
        'lastUpdatedBy' => 'string',
        'lastUpdatedDateUtc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shippingAccountId' => 'uuid',
        'shipmentId' => 'uuid',
        'trackingNumber' => null,
        'barcodeNumber' => null,
        'reference1' => null,
        'shipmentDate' => 'date',
        'status' => null,
        'manifestNumber' => null,
        'containerId' => null,
        'carrier' => null,
        'destinationCountryCode' => null,
        'lastUpdatedBy' => null,
        'lastUpdatedDateUtc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shippingAccountId' => 'ShippingAccountId',
        'shipmentId' => 'ShipmentId',
        'trackingNumber' => 'TrackingNumber',
        'barcodeNumber' => 'BarcodeNumber',
        'reference1' => 'Reference1',
        'shipmentDate' => 'ShipmentDate',
        'status' => 'Status',
        'manifestNumber' => 'ManifestNumber',
        'containerId' => 'ContainerId',
        'carrier' => 'Carrier',
        'destinationCountryCode' => 'DestinationCountryCode',
        'lastUpdatedBy' => 'LastUpdatedBy',
        'lastUpdatedDateUtc' => 'LastUpdatedDateUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shippingAccountId' => 'setShippingAccountId',
        'shipmentId' => 'setShipmentId',
        'trackingNumber' => 'setTrackingNumber',
        'barcodeNumber' => 'setBarcodeNumber',
        'reference1' => 'setReference1',
        'shipmentDate' => 'setShipmentDate',
        'status' => 'setStatus',
        'manifestNumber' => 'setManifestNumber',
        'containerId' => 'setContainerId',
        'carrier' => 'setCarrier',
        'destinationCountryCode' => 'setDestinationCountryCode',
        'lastUpdatedBy' => 'setLastUpdatedBy',
        'lastUpdatedDateUtc' => 'setLastUpdatedDateUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shippingAccountId' => 'getShippingAccountId',
        'shipmentId' => 'getShipmentId',
        'trackingNumber' => 'getTrackingNumber',
        'barcodeNumber' => 'getBarcodeNumber',
        'reference1' => 'getReference1',
        'shipmentDate' => 'getShipmentDate',
        'status' => 'getStatus',
        'manifestNumber' => 'getManifestNumber',
        'containerId' => 'getContainerId',
        'carrier' => 'getCarrier',
        'destinationCountryCode' => 'getDestinationCountryCode',
        'lastUpdatedBy' => 'getLastUpdatedBy',
        'lastUpdatedDateUtc' => 'getLastUpdatedDateUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shippingAccountId'] = isset($data['shippingAccountId']) ? $data['shippingAccountId'] : null;
        $this->container['shipmentId'] = isset($data['shipmentId']) ? $data['shipmentId'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['barcodeNumber'] = isset($data['barcodeNumber']) ? $data['barcodeNumber'] : null;
        $this->container['reference1'] = isset($data['reference1']) ? $data['reference1'] : null;
        $this->container['shipmentDate'] = isset($data['shipmentDate']) ? $data['shipmentDate'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['manifestNumber'] = isset($data['manifestNumber']) ? $data['manifestNumber'] : null;
        $this->container['containerId'] = isset($data['containerId']) ? $data['containerId'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['destinationCountryCode'] = isset($data['destinationCountryCode']) ? $data['destinationCountryCode'] : null;
        $this->container['lastUpdatedBy'] = isset($data['lastUpdatedBy']) ? $data['lastUpdatedBy'] : null;
        $this->container['lastUpdatedDateUtc'] = isset($data['lastUpdatedDateUtc']) ? $data['lastUpdatedDateUtc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shippingAccountId
     *
     * @return string
     */
    public function getShippingAccountId()
    {
        return $this->container['shippingAccountId'];
    }

    /**
     * Sets shippingAccountId
     *
     * @param string $shippingAccountId Shipping Account Id
     *
     * @return $this
     */
    public function setShippingAccountId($shippingAccountId)
    {
        $this->container['shippingAccountId'] = $shippingAccountId;

        return $this;
    }

    /**
     * Gets shipmentId
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipmentId'];
    }

    /**
     * Sets shipmentId
     *
     * @param string $shipmentId Shipment Id
     *
     * @return $this
     */
    public function setShipmentId($shipmentId)
    {
        $this->container['shipmentId'] = $shipmentId;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber Tracking Number
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets barcodeNumber
     *
     * @return string
     */
    public function getBarcodeNumber()
    {
        return $this->container['barcodeNumber'];
    }

    /**
     * Sets barcodeNumber
     *
     * @param string $barcodeNumber Barcode Number
     *
     * @return $this
     */
    public function setBarcodeNumber($barcodeNumber)
    {
        $this->container['barcodeNumber'] = $barcodeNumber;

        return $this;
    }

    /**
     * Gets reference1
     *
     * @return string
     */
    public function getReference1()
    {
        return $this->container['reference1'];
    }

    /**
     * Sets reference1
     *
     * @param string $reference1 Reference 1
     *
     * @return $this
     */
    public function setReference1($reference1)
    {
        $this->container['reference1'] = $reference1;

        return $this;
    }

    /**
     * Gets shipmentDate
     *
     * @return \DateTime
     */
    public function getShipmentDate()
    {
        return $this->container['shipmentDate'];
    }

    /**
     * Sets shipmentDate
     *
     * @param \DateTime $shipmentDate Shipment Date
     *
     * @return $this
     */
    public function setShipmentDate($shipmentDate)
    {
        $this->container['shipmentDate'] = $shipmentDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets manifestNumber
     *
     * @return string
     */
    public function getManifestNumber()
    {
        return $this->container['manifestNumber'];
    }

    /**
     * Sets manifestNumber
     *
     * @param string $manifestNumber Manifest Number
     *
     * @return $this
     */
    public function setManifestNumber($manifestNumber)
    {
        $this->container['manifestNumber'] = $manifestNumber;

        return $this;
    }

    /**
     * Gets containerId
     *
     * @return string
     */
    public function getContainerId()
    {
        return $this->container['containerId'];
    }

    /**
     * Sets containerId
     *
     * @param string $containerId Container Id
     *
     * @return $this
     */
    public function setContainerId($containerId)
    {
        $this->container['containerId'] = $containerId;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier Carrier Code
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets destinationCountryCode
     *
     * @return string
     */
    public function getDestinationCountryCode()
    {
        return $this->container['destinationCountryCode'];
    }

    /**
     * Sets destinationCountryCode
     *
     * @param string $destinationCountryCode Destination Country Code
     *
     * @return $this
     */
    public function setDestinationCountryCode($destinationCountryCode)
    {
        $this->container['destinationCountryCode'] = $destinationCountryCode;

        return $this;
    }

    /**
     * Gets lastUpdatedBy
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['lastUpdatedBy'];
    }

    /**
     * Sets lastUpdatedBy
     *
     * @param string $lastUpdatedBy Last Updated By
     *
     * @return $this
     */
    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->container['lastUpdatedBy'] = $lastUpdatedBy;

        return $this;
    }

    /**
     * Gets lastUpdatedDateUtc
     *
     * @return \DateTime
     */
    public function getLastUpdatedDateUtc()
    {
        return $this->container['lastUpdatedDateUtc'];
    }

    /**
     * Sets lastUpdatedDateUtc
     *
     * @param \DateTime $lastUpdatedDateUtc Last Updated Date UTC
     *
     * @return $this
     */
    public function setLastUpdatedDateUtc($lastUpdatedDateUtc)
    {
        $this->container['lastUpdatedDateUtc'] = $lastUpdatedDateUtc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
