<?php
/**
 * Shipper
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0-RM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMailV4\ShipmentsApi\Model;

use \ArrayAccess;
use \RoyalMailV4\ShipmentsApi\ObjectSerializer;

/**
 * Shipper Class Doc Comment
 *
 * @category Class
 * @description Used to provide shipper details such as address, contact details, VAT and EORI number etc.
 * @package  RoyalMailV4\ShipmentsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shipper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Shipper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shippingAccountId' => 'string',
        'shippingLocationId' => 'string',
        'reference1' => 'string',
        'reference2' => 'string',
        'departmentNumber' => 'string',
        'eoriNumber' => 'string',
        'vatNumber' => 'string',
        'address' => '\RoyalMailV4\ShipmentsApi\Model\ShipperAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shippingAccountId' => null,
        'shippingLocationId' => null,
        'reference1' => null,
        'reference2' => null,
        'departmentNumber' => null,
        'eoriNumber' => null,
        'vatNumber' => null,
        'address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shippingAccountId' => 'ShippingAccountId',
        'shippingLocationId' => 'ShippingLocationId',
        'reference1' => 'Reference1',
        'reference2' => 'Reference2',
        'departmentNumber' => 'DepartmentNumber',
        'eoriNumber' => 'EoriNumber',
        'vatNumber' => 'VatNumber',
        'address' => 'Address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shippingAccountId' => 'setShippingAccountId',
        'shippingLocationId' => 'setShippingLocationId',
        'reference1' => 'setReference1',
        'reference2' => 'setReference2',
        'departmentNumber' => 'setDepartmentNumber',
        'eoriNumber' => 'setEoriNumber',
        'vatNumber' => 'setVatNumber',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shippingAccountId' => 'getShippingAccountId',
        'shippingLocationId' => 'getShippingLocationId',
        'reference1' => 'getReference1',
        'reference2' => 'getReference2',
        'departmentNumber' => 'getDepartmentNumber',
        'eoriNumber' => 'getEoriNumber',
        'vatNumber' => 'getVatNumber',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shippingAccountId'] = isset($data['shippingAccountId']) ? $data['shippingAccountId'] : null;
        $this->container['shippingLocationId'] = isset($data['shippingLocationId']) ? $data['shippingLocationId'] : null;
        $this->container['reference1'] = isset($data['reference1']) ? $data['reference1'] : null;
        $this->container['reference2'] = isset($data['reference2']) ? $data['reference2'] : null;
        $this->container['departmentNumber'] = isset($data['departmentNumber']) ? $data['departmentNumber'] : null;
        $this->container['eoriNumber'] = isset($data['eoriNumber']) ? $data['eoriNumber'] : null;
        $this->container['vatNumber'] = isset($data['vatNumber']) ? $data['vatNumber'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shippingAccountId'] === null) {
            $invalidProperties[] = "'shippingAccountId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shippingAccountId
     *
     * @return string
     */
    public function getShippingAccountId()
    {
        return $this->container['shippingAccountId'];
    }

    /**
     * Sets shippingAccountId
     *
     * @param string $shippingAccountId Shipping Account the shipment is being created for. This can be populated with either the Shipping Account ID assigned by PRO SHIPPING Shipping Account ID or the Shipping Account Alias set when the Shipping Account was created. Both can be viewed in the Shipping Account GUI.
     *
     * @return $this
     */
    public function setShippingAccountId($shippingAccountId)
    {
        $this->container['shippingAccountId'] = $shippingAccountId;

        return $this;
    }

    /**
     * Gets shippingLocationId
     *
     * @return string
     */
    public function getShippingLocationId()
    {
        return $this->container['shippingLocationId'];
    }

    /**
     * Sets shippingLocationId
     *
     * @param string $shippingLocationId Shipping Location the shipment is being shipped from. This can be populated with either the Shipping Location ID assigned by PRO SHIPPING or the Shipping Location Alias set when the Shipping Location was created.Both can be viewed in the Shipping Location GUI. <br />Mandatory if there is more than one Shipping Location available for the Shipping Account.
     *
     * @return $this
     */
    public function setShippingLocationId($shippingLocationId)
    {
        $this->container['shippingLocationId'] = $shippingLocationId;

        return $this;
    }

    /**
     * Gets reference1
     *
     * @return string
     */
    public function getReference1()
    {
        return $this->container['reference1'];
    }

    /**
     * Sets reference1
     *
     * @param string $reference1 The shipper's reference for this shipment - this is usually the shipper's order number that was provided to the consumer at the time the order was made.
     *
     * @return $this
     */
    public function setReference1($reference1)
    {
        $this->container['reference1'] = $reference1;

        return $this;
    }

    /**
     * Gets reference2
     *
     * @return string
     */
    public function getReference2()
    {
        return $this->container['reference2'];
    }

    /**
     * Sets reference2
     *
     * @param string $reference2 Optional second reference for this shipment.
     *
     * @return $this
     */
    public function setReference2($reference2)
    {
        $this->container['reference2'] = $reference2;

        return $this;
    }

    /**
     * Gets departmentNumber
     *
     * @return string
     */
    public function getDepartmentNumber()
    {
        return $this->container['departmentNumber'];
    }

    /**
     * Sets departmentNumber
     *
     * @param string $departmentNumber Department Number <br />If provided for a Royal Mail shipment, Department Number must be exactly 10 characters and must be an existing Department Number that has been setup with Royal Mail.
     *
     * @return $this
     */
    public function setDepartmentNumber($departmentNumber)
    {
        $this->container['departmentNumber'] = $departmentNumber;

        return $this;
    }

    /**
     * Gets eoriNumber
     *
     * @return string
     */
    public function getEoriNumber()
    {
        return $this->container['eoriNumber'];
    }

    /**
     * Sets eoriNumber
     *
     * @param string $eoriNumber Shipper's Economic Operators and Registration Identification (EORI) number. If a Shipper EORI number is used for the shipment, it must be provided here and not in the Customs element.  <br />Shipper's EORI number starts with the ISO Alpha-2 Country Code followed by a maximum 15 alphanumeric characters. For Northern Ireland starts with XI
     *
     * @return $this
     */
    public function setEoriNumber($eoriNumber)
    {
        $this->container['eoriNumber'] = $eoriNumber;

        return $this;
    }

    /**
     * Gets vatNumber
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vatNumber'];
    }

    /**
     * Sets vatNumber
     *
     * @param string $vatNumber Shipper's Value Added Tax (VAT) Number. If a Shipper VAT number is used for the shipment, it must be provided here and not in the Customs element.
     *
     * @return $this
     */
    public function setVatNumber($vatNumber)
    {
        $this->container['vatNumber'] = $vatNumber;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \RoyalMailV4\ShipmentsApi\Model\ShipperAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \RoyalMailV4\ShipmentsApi\Model\ShipperAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
